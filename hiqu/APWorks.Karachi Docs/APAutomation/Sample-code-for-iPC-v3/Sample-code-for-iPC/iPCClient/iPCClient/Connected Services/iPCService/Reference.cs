//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iPCClient.iPCService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCSession", Namespace="com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class IPCSession : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iPCClient.iPCService.AdToolInfoData AdToolInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthenticationTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAuthenticatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iPCClient.iPCService.UserInfoData UserInfoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iPCClient.iPCService.AdToolInfoData AdToolInfo {
            get {
                return this.AdToolInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.AdToolInfoField, value) != true)) {
                    this.AdToolInfoField = value;
                    this.RaisePropertyChanged("AdToolInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthenticationToken {
            get {
                return this.AuthenticationTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthenticationTokenField, value) != true)) {
                    this.AuthenticationTokenField = value;
                    this.RaisePropertyChanged("AuthenticationToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAuthenticated {
            get {
                return this.IsAuthenticatedField;
            }
            set {
                if ((this.IsAuthenticatedField.Equals(value) != true)) {
                    this.IsAuthenticatedField = value;
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iPCClient.iPCService.UserInfoData UserInfo {
            get {
                return this.UserInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.UserInfoField, value) != true)) {
                    this.UserInfoField = value;
                    this.RaisePropertyChanged("UserInfo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdToolInfoData", Namespace="http://schemas.datacontract.org/2004/07/com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class AdToolInfoData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> AdToolConnectParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AdToolIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPCConnectorDLLNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPCNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginalNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginalVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> AdToolConnectParameters {
            get {
                return this.AdToolConnectParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.AdToolConnectParametersField, value) != true)) {
                    this.AdToolConnectParametersField = value;
                    this.RaisePropertyChanged("AdToolConnectParameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AdToolID {
            get {
                return this.AdToolIDField;
            }
            set {
                if ((this.AdToolIDField.Equals(value) != true)) {
                    this.AdToolIDField = value;
                    this.RaisePropertyChanged("AdToolID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPCConnectorDLLName {
            get {
                return this.IPCConnectorDLLNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IPCConnectorDLLNameField, value) != true)) {
                    this.IPCConnectorDLLNameField = value;
                    this.RaisePropertyChanged("IPCConnectorDLLName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPCName {
            get {
                return this.IPCNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IPCNameField, value) != true)) {
                    this.IPCNameField = value;
                    this.RaisePropertyChanged("IPCName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalName {
            get {
                return this.OriginalNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalNameField, value) != true)) {
                    this.OriginalNameField = value;
                    this.RaisePropertyChanged("OriginalName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalVersion {
            get {
                return this.OriginalVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalVersionField, value) != true)) {
                    this.OriginalVersionField = value;
                    this.RaisePropertyChanged("OriginalVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfoData", Namespace="http://schemas.datacontract.org/2004/07/com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class UserInfoData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DigitalToolAccessTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DigitalToolIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DigitalToolSequenceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPCAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPCDevTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPCUserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DigitalToolAccessTag {
            get {
                return this.DigitalToolAccessTagField;
            }
            set {
                if ((object.ReferenceEquals(this.DigitalToolAccessTagField, value) != true)) {
                    this.DigitalToolAccessTagField = value;
                    this.RaisePropertyChanged("DigitalToolAccessTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DigitalToolID {
            get {
                return this.DigitalToolIDField;
            }
            set {
                if ((this.DigitalToolIDField.Equals(value) != true)) {
                    this.DigitalToolIDField = value;
                    this.RaisePropertyChanged("DigitalToolID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DigitalToolSequenceID {
            get {
                return this.DigitalToolSequenceIDField;
            }
            set {
                if ((this.DigitalToolSequenceIDField.Equals(value) != true)) {
                    this.DigitalToolSequenceIDField = value;
                    this.RaisePropertyChanged("DigitalToolSequenceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPCAccountID {
            get {
                return this.IPCAccountIDField;
            }
            set {
                if ((object.ReferenceEquals(this.IPCAccountIDField, value) != true)) {
                    this.IPCAccountIDField = value;
                    this.RaisePropertyChanged("IPCAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPCDevToken {
            get {
                return this.IPCDevTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.IPCDevTokenField, value) != true)) {
                    this.IPCDevTokenField = value;
                    this.RaisePropertyChanged("IPCDevToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPCUserID {
            get {
                return this.IPCUserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.IPCUserIDField, value) != true)) {
                    this.IPCUserIDField = value;
                    this.RaisePropertyChanged("IPCUserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCAdToolInfo", Namespace="com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class IPCAdToolInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccessTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPCToolDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPCToolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConnectorActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrigToolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SequenceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToolCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ToolIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iPCClient.iPCService.IPCNameValue[] ToolPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToolVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessTag {
            get {
                return this.AccessTagField;
            }
            set {
                if ((object.ReferenceEquals(this.AccessTagField, value) != true)) {
                    this.AccessTagField = value;
                    this.RaisePropertyChanged("AccessTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPCToolDescription {
            get {
                return this.IPCToolDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.IPCToolDescriptionField, value) != true)) {
                    this.IPCToolDescriptionField = value;
                    this.RaisePropertyChanged("IPCToolDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPCToolName {
            get {
                return this.IPCToolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IPCToolNameField, value) != true)) {
                    this.IPCToolNameField = value;
                    this.RaisePropertyChanged("IPCToolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnectorActive {
            get {
                return this.IsConnectorActiveField;
            }
            set {
                if ((this.IsConnectorActiveField.Equals(value) != true)) {
                    this.IsConnectorActiveField = value;
                    this.RaisePropertyChanged("IsConnectorActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrigToolName {
            get {
                return this.OrigToolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OrigToolNameField, value) != true)) {
                    this.OrigToolNameField = value;
                    this.RaisePropertyChanged("OrigToolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SequenceID {
            get {
                return this.SequenceIDField;
            }
            set {
                if ((this.SequenceIDField.Equals(value) != true)) {
                    this.SequenceIDField = value;
                    this.RaisePropertyChanged("SequenceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToolCategory {
            get {
                return this.ToolCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ToolCategoryField, value) != true)) {
                    this.ToolCategoryField = value;
                    this.RaisePropertyChanged("ToolCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ToolID {
            get {
                return this.ToolIDField;
            }
            set {
                if ((this.ToolIDField.Equals(value) != true)) {
                    this.ToolIDField = value;
                    this.RaisePropertyChanged("ToolID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iPCClient.iPCService.IPCNameValue[] ToolProperties {
            get {
                return this.ToolPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.ToolPropertiesField, value) != true)) {
                    this.ToolPropertiesField = value;
                    this.RaisePropertyChanged("ToolProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToolVersion {
            get {
                return this.ToolVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.ToolVersionField, value) != true)) {
                    this.ToolVersionField = value;
                    this.RaisePropertyChanged("ToolVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCNameValue", Namespace="com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class IPCNameValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCEntityDesignator", Namespace="com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class IPCEntityDesignator : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdToolNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryTypeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IPCEntityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPCNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdToolName {
            get {
                return this.AdToolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdToolNameField, value) != true)) {
                    this.AdToolNameField = value;
                    this.RaisePropertyChanged("AdToolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryType {
            get {
                return this.CategoryTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryTypeField, value) != true)) {
                    this.CategoryTypeField = value;
                    this.RaisePropertyChanged("CategoryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryTypeCode {
            get {
                return this.CategoryTypeCodeField;
            }
            set {
                if ((this.CategoryTypeCodeField.Equals(value) != true)) {
                    this.CategoryTypeCodeField = value;
                    this.RaisePropertyChanged("CategoryTypeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IPCEntityID {
            get {
                return this.IPCEntityIDField;
            }
            set {
                if ((this.IPCEntityIDField.Equals(value) != true)) {
                    this.IPCEntityIDField = value;
                    this.RaisePropertyChanged("IPCEntityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPCName {
            get {
                return this.IPCNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IPCNameField, value) != true)) {
                    this.IPCNameField = value;
                    this.RaisePropertyChanged("IPCName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCRecordsSorter", Namespace="com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class IPCRecordsSorter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iPCClient.iPCService.IPCRecordsSorterOperator OperatorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementName {
            get {
                return this.ElementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementNameField, value) != true)) {
                    this.ElementNameField = value;
                    this.RaisePropertyChanged("ElementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iPCClient.iPCService.IPCRecordsSorterOperator Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((this.OperatorField.Equals(value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCRecordsSorterOperator", Namespace="com.paradigm.ipc.adservice")]
    public enum IPCRecordsSorterOperator : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ASCENDING = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DESCENDING = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCRecordsFilter", Namespace="com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class IPCRecordsFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ElementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iPCClient.iPCService.IPCRecordsFilterOperator OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] valuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ElementName {
            get {
                return this.ElementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementNameField, value) != true)) {
                    this.ElementNameField = value;
                    this.RaisePropertyChanged("ElementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iPCClient.iPCService.IPCRecordsFilterOperator Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((this.OperatorField.Equals(value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] values {
            get {
                return this.valuesField;
            }
            set {
                if ((object.ReferenceEquals(this.valuesField, value) != true)) {
                    this.valuesField = value;
                    this.RaisePropertyChanged("values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCRecordsFilterOperator", Namespace="com.paradigm.ipc.adservice")]
    public enum IPCRecordsFilterOperator : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNKNOWN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EQUALS = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOT_EQUALS = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IN = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NOT_IN = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CONTAINS_IGNORE_CASE = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STARTS_WITH_IGNORE_CASE = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BETWEEN = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LESS_THAN_EQUALS = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MORE_THAN_EQUALS = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCDataElementNameClass", Namespace="com.paradigm.ipc.adservice")]
    public enum IPCDataElementNameClass : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IPC = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ADTOOL = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCEntityData", Namespace="com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class IPCEntityData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[][] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iPCClient.iPCService.IPCDataElementDescriptor[] ElementDescriptorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iPCClient.iPCService.IPCPagingInfo PagingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[][] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iPCClient.iPCService.IPCDataElementDescriptor[] ElementDescriptors {
            get {
                return this.ElementDescriptorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementDescriptorsField, value) != true)) {
                    this.ElementDescriptorsField = value;
                    this.RaisePropertyChanged("ElementDescriptors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iPCClient.iPCService.IPCPagingInfo Paging {
            get {
                return this.PagingField;
            }
            set {
                if ((object.ReferenceEquals(this.PagingField, value) != true)) {
                    this.PagingField = value;
                    this.RaisePropertyChanged("Paging");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCPagingInfo", Namespace="com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class IPCPagingInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentPageNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequestQueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalNumberOfPagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalNumberOfRecordsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalInfo {
            get {
                return this.AdditionalInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalInfoField, value) != true)) {
                    this.AdditionalInfoField = value;
                    this.RaisePropertyChanged("AdditionalInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentPageNumber {
            get {
                return this.CurrentPageNumberField;
            }
            set {
                if ((this.CurrentPageNumberField.Equals(value) != true)) {
                    this.CurrentPageNumberField = value;
                    this.RaisePropertyChanged("CurrentPageNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageSize {
            get {
                return this.PageSizeField;
            }
            set {
                if ((this.PageSizeField.Equals(value) != true)) {
                    this.PageSizeField = value;
                    this.RaisePropertyChanged("PageSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequestQueryID {
            get {
                return this.RequestQueryIDField;
            }
            set {
                if ((this.RequestQueryIDField.Equals(value) != true)) {
                    this.RequestQueryIDField = value;
                    this.RaisePropertyChanged("RequestQueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalNumberOfPages {
            get {
                return this.TotalNumberOfPagesField;
            }
            set {
                if ((this.TotalNumberOfPagesField.Equals(value) != true)) {
                    this.TotalNumberOfPagesField = value;
                    this.RaisePropertyChanged("TotalNumberOfPages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalNumberOfRecords {
            get {
                return this.TotalNumberOfRecordsField;
            }
            set {
                if ((this.TotalNumberOfRecordsField.Equals(value) != true)) {
                    this.TotalNumberOfRecordsField = value;
                    this.RaisePropertyChanged("TotalNumberOfRecords");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCDataElementDescriptor", Namespace="com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class IPCDataElementDescriptor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdToolElementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArrayLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iPCClient.iPCService.IPCDataElementType DataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ElementIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iPCClient.iPCService.IPCEnumElement[] EnumListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private iPCClient.iPCService.IPCEnumElement[] FilterOperatorsListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPCElementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFilterableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSortableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdToolElementName {
            get {
                return this.AdToolElementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdToolElementNameField, value) != true)) {
                    this.AdToolElementNameField = value;
                    this.RaisePropertyChanged("AdToolElementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArrayLevel {
            get {
                return this.ArrayLevelField;
            }
            set {
                if ((this.ArrayLevelField.Equals(value) != true)) {
                    this.ArrayLevelField = value;
                    this.RaisePropertyChanged("ArrayLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iPCClient.iPCService.IPCDataElementType DataType {
            get {
                return this.DataTypeField;
            }
            set {
                if ((this.DataTypeField.Equals(value) != true)) {
                    this.DataTypeField = value;
                    this.RaisePropertyChanged("DataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ElementID {
            get {
                return this.ElementIDField;
            }
            set {
                if ((this.ElementIDField.Equals(value) != true)) {
                    this.ElementIDField = value;
                    this.RaisePropertyChanged("ElementID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iPCClient.iPCService.IPCEnumElement[] EnumList {
            get {
                return this.EnumListField;
            }
            set {
                if ((object.ReferenceEquals(this.EnumListField, value) != true)) {
                    this.EnumListField = value;
                    this.RaisePropertyChanged("EnumList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public iPCClient.iPCService.IPCEnumElement[] FilterOperatorsList {
            get {
                return this.FilterOperatorsListField;
            }
            set {
                if ((object.ReferenceEquals(this.FilterOperatorsListField, value) != true)) {
                    this.FilterOperatorsListField = value;
                    this.RaisePropertyChanged("FilterOperatorsList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPCElementName {
            get {
                return this.IPCElementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IPCElementNameField, value) != true)) {
                    this.IPCElementNameField = value;
                    this.RaisePropertyChanged("IPCElementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFilterable {
            get {
                return this.IsFilterableField;
            }
            set {
                if ((this.IsFilterableField.Equals(value) != true)) {
                    this.IsFilterableField = value;
                    this.RaisePropertyChanged("IsFilterable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSortable {
            get {
                return this.IsSortableField;
            }
            set {
                if ((this.IsSortableField.Equals(value) != true)) {
                    this.IsSortableField = value;
                    this.RaisePropertyChanged("IsSortable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((this.OrderIDField.Equals(value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCDataElementType", Namespace="com.paradigm.ipc.adservice")]
    public enum IPCDataElementType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNKNOWN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STRING = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INT = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LONG = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DATE = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MONEY = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DOUBLE = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ENUM = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BOOLEAN = 8,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCEnumElement", Namespace="com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class IPCEnumElement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EnumNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EnumNameDisplayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EnumValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnumName {
            get {
                return this.EnumNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EnumNameField, value) != true)) {
                    this.EnumNameField = value;
                    this.RaisePropertyChanged("EnumName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnumNameDisplay {
            get {
                return this.EnumNameDisplayField;
            }
            set {
                if ((object.ReferenceEquals(this.EnumNameDisplayField, value) != true)) {
                    this.EnumNameDisplayField = value;
                    this.RaisePropertyChanged("EnumNameDisplay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EnumValue {
            get {
                return this.EnumValueField;
            }
            set {
                if ((this.EnumValueField.Equals(value) != true)) {
                    this.EnumValueField = value;
                    this.RaisePropertyChanged("EnumValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCSyncRequest", Namespace="com.paradigm.ipc.adservice")]
    [System.SerializableAttribute()]
    public partial class IPCSyncRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentRecordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FailedRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCompleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProgressKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProgressTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SuccessRecordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalRecordsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentRecords {
            get {
                return this.CurrentRecordsField;
            }
            set {
                if ((this.CurrentRecordsField.Equals(value) != true)) {
                    this.CurrentRecordsField = value;
                    this.RaisePropertyChanged("CurrentRecords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDescription {
            get {
                return this.ErrorDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDescriptionField, value) != true)) {
                    this.ErrorDescriptionField = value;
                    this.RaisePropertyChanged("ErrorDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FailedRecord {
            get {
                return this.FailedRecordField;
            }
            set {
                if ((this.FailedRecordField.Equals(value) != true)) {
                    this.FailedRecordField = value;
                    this.RaisePropertyChanged("FailedRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsComplete {
            get {
                return this.IsCompleteField;
            }
            set {
                if ((this.IsCompleteField.Equals(value) != true)) {
                    this.IsCompleteField = value;
                    this.RaisePropertyChanged("IsComplete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProgressKey {
            get {
                return this.ProgressKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ProgressKeyField, value) != true)) {
                    this.ProgressKeyField = value;
                    this.RaisePropertyChanged("ProgressKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProgressType {
            get {
                return this.ProgressTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProgressTypeField, value) != true)) {
                    this.ProgressTypeField = value;
                    this.RaisePropertyChanged("ProgressType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SuccessRecord {
            get {
                return this.SuccessRecordField;
            }
            set {
                if ((this.SuccessRecordField.Equals(value) != true)) {
                    this.SuccessRecordField = value;
                    this.RaisePropertyChanged("SuccessRecord");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalRecords {
            get {
                return this.TotalRecordsField;
            }
            set {
                if ((this.TotalRecordsField.Equals(value) != true)) {
                    this.TotalRecordsField = value;
                    this.RaisePropertyChanged("TotalRecords");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCAsyncReportRunStatusType", Namespace="com.paradigm.ipc.adservice")]
    public enum IPCAsyncReportRunStatusType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNKNOWN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PENDING = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RUNNING = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        COMPLETE = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ERROR = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IPCSubmitGetEntityDataStatusType", Namespace="com.paradigm.ipc.adservice")]
    public enum IPCSubmitGetEntityDataStatusType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UNKNOWN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RUNNING = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        COMPLETE = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ERROR = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="com.paradigm.ipc.adservice", ConfigurationName="iPCService.IIPCAdServiceAPI")]
    public interface IIPCAdServiceAPI {
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEdition", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEditionResponse")]
        string GetEdition();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEdition", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEditionResponse")]
        System.Threading.Tasks.Task<string> GetEditionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetVersion", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetVersionResponse")]
        string GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetVersion", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetVersionResponse")]
        System.Threading.Tasks.Task<string> GetVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetReleaseDate", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetReleaseDateResponse")]
        string GetReleaseDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetReleaseDate", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetReleaseDateResponse")]
        System.Threading.Tasks.Task<string> GetReleaseDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/Authenticate", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/AuthenticateResponse")]
        string Authenticate(string IPCAccountID, string IPCUserID, string Password, string IPCDevToken, int DigitalToolID, string AccessTag, string ConnectionProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/Authenticate", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/AuthenticateResponse")]
        System.Threading.Tasks.Task<string> AuthenticateAsync(string IPCAccountID, string IPCUserID, string Password, string IPCDevToken, int DigitalToolID, string AccessTag, string ConnectionProperties);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetUserSession", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetUserSessionResponse")]
        iPCClient.iPCService.IPCSession GetUserSession(string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetUserSession", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetUserSessionResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCSession> GetUserSessionAsync(string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetFullAdToolList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetFullAdToolListResponse")]
        iPCClient.iPCService.IPCAdToolInfo[] GetFullAdToolList();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetFullAdToolList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetFullAdToolListResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCAdToolInfo[]> GetFullAdToolListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAccessibleAdToolList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAccessibleAdToolListResponse")]
        iPCClient.iPCService.IPCAdToolInfo[] GetAccessibleAdToolList(string IPCAccountID, string IPCUserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAccessibleAdToolList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAccessibleAdToolListResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCAdToolInfo[]> GetAccessibleAdToolListAsync(string IPCAccountID, string IPCUserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetDeliverableEntityList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetDeliverableEntityListResponse")]
        iPCClient.iPCService.IPCEntityDesignator[] GetDeliverableEntityList(string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetDeliverableEntityList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetDeliverableEntityListResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityDesignator[]> GetDeliverableEntityListAsync(string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEntityData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEntityDataResponse")]
        iPCClient.iPCService.IPCEntityData GetEntityData(string Token, int EntityID, string[] SelectableElementsList, iPCClient.iPCService.IPCRecordsSorter[] SortableElementsList, iPCClient.iPCService.IPCRecordsFilter[] FilterableElementsList, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEntityData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEntityDataResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> GetEntityDataAsync(string Token, int EntityID, string[] SelectableElementsList, iPCClient.iPCService.IPCRecordsSorter[] SortableElementsList, iPCClient.iPCService.IPCRecordsFilter[] FilterableElementsList, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEntityDataPage", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEntityDataPageResponse")]
        iPCClient.iPCService.IPCEntityData GetEntityDataPage(string Token, int RequestQueryID, int PageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEntityDataPage", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetEntityDataPageResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> GetEntityDataPageAsync(string Token, int RequestQueryID, int PageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CloseEntityData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CloseEntityDataResponse")]
        void CloseEntityData(string Token, int RequestQueryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CloseEntityData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CloseEntityDataResponse")]
        System.Threading.Tasks.Task CloseEntityDataAsync(string Token, int RequestQueryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableSelectableElementsList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableSelectableElementsListRes" +
            "ponse")]
        string[] GetAvailableSelectableElementsList(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableSelectableElementsList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableSelectableElementsListRes" +
            "ponse")]
        System.Threading.Tasks.Task<string[]> GetAvailableSelectableElementsListAsync(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAllElementsList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAllElementsListResponse")]
        iPCClient.iPCService.IPCDataElementDescriptor[] GetAllElementsList(string Token, int EntityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAllElementsList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAllElementsListResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCDataElementDescriptor[]> GetAllElementsListAsync(string Token, int EntityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableSortableElementsList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableSortableElementsListRespo" +
            "nse")]
        string[] GetAvailableSortableElementsList(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableSortableElementsList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableSortableElementsListRespo" +
            "nse")]
        System.Threading.Tasks.Task<string[]> GetAvailableSortableElementsListAsync(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableFilterableElementsList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableFilterableElementsListRes" +
            "ponse")]
        string[] GetAvailableFilterableElementsList(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableFilterableElementsList", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableFilterableElementsListRes" +
            "ponse")]
        System.Threading.Tasks.Task<string[]> GetAvailableFilterableElementsListAsync(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CreateBlanketEntity", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CreateBlanketEntityResponse")]
        iPCClient.iPCService.IPCEntityData CreateBlanketEntity(string Token, int EntityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CreateBlanketEntity", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CreateBlanketEntityResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> CreateBlanketEntityAsync(string Token, int EntityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CreateBlanketEntities", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CreateBlanketEntitiesResponse")]
        iPCClient.iPCService.IPCEntityData CreateBlanketEntities(string Token, int EntityID, int DataHeight);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CreateBlanketEntities", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CreateBlanketEntitiesResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> CreateBlanketEntitiesAsync(string Token, int EntityID, int DataHeight);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableAlterOperations", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableAlterOperationsResponse")]
        string[] GetAvailableAlterOperations(string Token, int EntityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableAlterOperations", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAvailableAlterOperationsResponse")]
        System.Threading.Tasks.Task<string[]> GetAvailableAlterOperationsAsync(string Token, int EntityID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/AlterEntityData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/AlterEntityDataResponse")]
        iPCClient.iPCService.IPCEntityData AlterEntityData(string Token, int EntityID, string Operation, iPCClient.iPCService.IPCEntityData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/AlterEntityData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/AlterEntityDataResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> AlterEntityDataAsync(string Token, int EntityID, string Operation, iPCClient.iPCService.IPCEntityData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/AlterEntitiesData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/AlterEntitiesDataResponse")]
        iPCClient.iPCService.IPCEntityData AlterEntitiesData(string Token, int EntityID, string[] Operations, iPCClient.iPCService.IPCEntityData data, iPCClient.iPCService.IPCSyncRequest SyncReq);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/AlterEntitiesData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/AlterEntitiesDataResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> AlterEntitiesDataAsync(string Token, int EntityID, string[] Operations, iPCClient.iPCService.IPCEntityData data, iPCClient.iPCService.IPCSyncRequest SyncReq);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/StartAsyncReport", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/StartAsyncReportResponse")]
        void StartAsyncReport(string Token, string ReportQueryID, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/StartAsyncReport", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/StartAsyncReportResponse")]
        System.Threading.Tasks.Task StartAsyncReportAsync(string Token, string ReportQueryID, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CheckAsyncReportRunStatus", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CheckAsyncReportRunStatusResponse")]
        iPCClient.iPCService.IPCAsyncReportRunStatusType CheckAsyncReportRunStatus(string Token, string ReportQueryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CheckAsyncReportRunStatus", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CheckAsyncReportRunStatusResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCAsyncReportRunStatusType> CheckAsyncReportRunStatusAsync(string Token, string ReportQueryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAsyncReportData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAsyncReportDataResponse")]
        iPCClient.iPCService.IPCEntityData GetAsyncReportData(string Token, string ReportQueryID, int PageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAsyncReportData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetAsyncReportDataResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> GetAsyncReportDataAsync(string Token, string ReportQueryID, int PageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/StopAsyncReport", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/StopAsyncReportResponse")]
        void StopAsyncReport(string Token, string ReportQueryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/StopAsyncReport", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/StopAsyncReportResponse")]
        System.Threading.Tasks.Task StopAsyncReportAsync(string Token, string ReportQueryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/SubmitGetEntityDataRequest", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/SubmitGetEntityDataRequestResponse")]
        int SubmitGetEntityDataRequest(string Token, int EntityID, string[] SelectableElementsList, iPCClient.iPCService.IPCRecordsSorter[] SortableElementsList, iPCClient.iPCService.IPCRecordsFilter[] FilterableElementsList, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/SubmitGetEntityDataRequest", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/SubmitGetEntityDataRequestResponse")]
        System.Threading.Tasks.Task<int> SubmitGetEntityDataRequestAsync(string Token, int EntityID, string[] SelectableElementsList, iPCClient.iPCService.IPCRecordsSorter[] SortableElementsList, iPCClient.iPCService.IPCRecordsFilter[] FilterableElementsList, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass, int PageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CheckGetEntityDataRunStatus", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CheckGetEntityDataRunStatusResponse")]
        iPCClient.iPCService.IPCSubmitGetEntityDataStatusType CheckGetEntityDataRunStatus(string Token, int SubmitRequestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CheckGetEntityDataRunStatus", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CheckGetEntityDataRunStatusResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCSubmitGetEntityDataStatusType> CheckGetEntityDataRunStatusAsync(string Token, int SubmitRequestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetDeferedEntityData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetDeferedEntityDataResponse")]
        iPCClient.iPCService.IPCEntityData GetDeferedEntityData(string Token, int SubmitRequestID, int PageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetDeferedEntityData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetDeferedEntityDataResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> GetDeferedEntityDataAsync(string Token, int SubmitRequestID, int PageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CloseDeferedEntityData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CloseDeferedEntityDataResponse")]
        void CloseDeferedEntityData(string Token, int SubmitRequestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CloseDeferedEntityData", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/CloseDeferedEntityDataResponse")]
        System.Threading.Tasks.Task CloseDeferedEntityDataAsync(string Token, int SubmitRequestID);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/SetSyncProgress", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/SetSyncProgressResponse")]
        void SetSyncProgress(string Token, iPCClient.iPCService.IPCSyncRequest SyncReq);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/SetSyncProgress", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/SetSyncProgressResponse")]
        System.Threading.Tasks.Task SetSyncProgressAsync(string Token, iPCClient.iPCService.IPCSyncRequest SyncReq);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetSyncProgress", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetSyncProgressResponse")]
        iPCClient.iPCService.IPCSyncRequest[] GetSyncProgress(string Token, iPCClient.iPCService.IPCSyncRequest SyncReq);
        
        [System.ServiceModel.OperationContractAttribute(Action="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetSyncProgress", ReplyAction="com.paradigm.ipc.adservice/IIPCAdServiceAPI/GetSyncProgressResponse")]
        System.Threading.Tasks.Task<iPCClient.iPCService.IPCSyncRequest[]> GetSyncProgressAsync(string Token, iPCClient.iPCService.IPCSyncRequest SyncReq);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIPCAdServiceAPIChannel : iPCClient.iPCService.IIPCAdServiceAPI, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IPCAdServiceAPIClient : System.ServiceModel.ClientBase<iPCClient.iPCService.IIPCAdServiceAPI>, iPCClient.iPCService.IIPCAdServiceAPI {
        
        public IPCAdServiceAPIClient() {
        }
        
        public IPCAdServiceAPIClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IPCAdServiceAPIClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IPCAdServiceAPIClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IPCAdServiceAPIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetEdition() {
            return base.Channel.GetEdition();
        }
        
        public System.Threading.Tasks.Task<string> GetEditionAsync() {
            return base.Channel.GetEditionAsync();
        }
        
        public string GetVersion() {
            return base.Channel.GetVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetVersionAsync() {
            return base.Channel.GetVersionAsync();
        }
        
        public string GetReleaseDate() {
            return base.Channel.GetReleaseDate();
        }
        
        public System.Threading.Tasks.Task<string> GetReleaseDateAsync() {
            return base.Channel.GetReleaseDateAsync();
        }
        
        public string Authenticate(string IPCAccountID, string IPCUserID, string Password, string IPCDevToken, int DigitalToolID, string AccessTag, string ConnectionProperties) {
            return base.Channel.Authenticate(IPCAccountID, IPCUserID, Password, IPCDevToken, DigitalToolID, AccessTag, ConnectionProperties);
        }
        
        public System.Threading.Tasks.Task<string> AuthenticateAsync(string IPCAccountID, string IPCUserID, string Password, string IPCDevToken, int DigitalToolID, string AccessTag, string ConnectionProperties) {
            return base.Channel.AuthenticateAsync(IPCAccountID, IPCUserID, Password, IPCDevToken, DigitalToolID, AccessTag, ConnectionProperties);
        }
        
        public iPCClient.iPCService.IPCSession GetUserSession(string Token) {
            return base.Channel.GetUserSession(Token);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCSession> GetUserSessionAsync(string Token) {
            return base.Channel.GetUserSessionAsync(Token);
        }
        
        public iPCClient.iPCService.IPCAdToolInfo[] GetFullAdToolList() {
            return base.Channel.GetFullAdToolList();
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCAdToolInfo[]> GetFullAdToolListAsync() {
            return base.Channel.GetFullAdToolListAsync();
        }
        
        public iPCClient.iPCService.IPCAdToolInfo[] GetAccessibleAdToolList(string IPCAccountID, string IPCUserID, string Password) {
            return base.Channel.GetAccessibleAdToolList(IPCAccountID, IPCUserID, Password);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCAdToolInfo[]> GetAccessibleAdToolListAsync(string IPCAccountID, string IPCUserID, string Password) {
            return base.Channel.GetAccessibleAdToolListAsync(IPCAccountID, IPCUserID, Password);
        }
        
        public iPCClient.iPCService.IPCEntityDesignator[] GetDeliverableEntityList(string Token) {
            return base.Channel.GetDeliverableEntityList(Token);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityDesignator[]> GetDeliverableEntityListAsync(string Token) {
            return base.Channel.GetDeliverableEntityListAsync(Token);
        }
        
        public iPCClient.iPCService.IPCEntityData GetEntityData(string Token, int EntityID, string[] SelectableElementsList, iPCClient.iPCService.IPCRecordsSorter[] SortableElementsList, iPCClient.iPCService.IPCRecordsFilter[] FilterableElementsList, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass, int PageSize) {
            return base.Channel.GetEntityData(Token, EntityID, SelectableElementsList, SortableElementsList, FilterableElementsList, ElementNameClass, PageSize);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> GetEntityDataAsync(string Token, int EntityID, string[] SelectableElementsList, iPCClient.iPCService.IPCRecordsSorter[] SortableElementsList, iPCClient.iPCService.IPCRecordsFilter[] FilterableElementsList, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass, int PageSize) {
            return base.Channel.GetEntityDataAsync(Token, EntityID, SelectableElementsList, SortableElementsList, FilterableElementsList, ElementNameClass, PageSize);
        }
        
        public iPCClient.iPCService.IPCEntityData GetEntityDataPage(string Token, int RequestQueryID, int PageNumber) {
            return base.Channel.GetEntityDataPage(Token, RequestQueryID, PageNumber);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> GetEntityDataPageAsync(string Token, int RequestQueryID, int PageNumber) {
            return base.Channel.GetEntityDataPageAsync(Token, RequestQueryID, PageNumber);
        }
        
        public void CloseEntityData(string Token, int RequestQueryID) {
            base.Channel.CloseEntityData(Token, RequestQueryID);
        }
        
        public System.Threading.Tasks.Task CloseEntityDataAsync(string Token, int RequestQueryID) {
            return base.Channel.CloseEntityDataAsync(Token, RequestQueryID);
        }
        
        public string[] GetAvailableSelectableElementsList(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass) {
            return base.Channel.GetAvailableSelectableElementsList(Token, EntityID, ElementNameClass);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailableSelectableElementsListAsync(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass) {
            return base.Channel.GetAvailableSelectableElementsListAsync(Token, EntityID, ElementNameClass);
        }
        
        public iPCClient.iPCService.IPCDataElementDescriptor[] GetAllElementsList(string Token, int EntityID) {
            return base.Channel.GetAllElementsList(Token, EntityID);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCDataElementDescriptor[]> GetAllElementsListAsync(string Token, int EntityID) {
            return base.Channel.GetAllElementsListAsync(Token, EntityID);
        }
        
        public string[] GetAvailableSortableElementsList(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass) {
            return base.Channel.GetAvailableSortableElementsList(Token, EntityID, ElementNameClass);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailableSortableElementsListAsync(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass) {
            return base.Channel.GetAvailableSortableElementsListAsync(Token, EntityID, ElementNameClass);
        }
        
        public string[] GetAvailableFilterableElementsList(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass) {
            return base.Channel.GetAvailableFilterableElementsList(Token, EntityID, ElementNameClass);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailableFilterableElementsListAsync(string Token, int EntityID, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass) {
            return base.Channel.GetAvailableFilterableElementsListAsync(Token, EntityID, ElementNameClass);
        }
        
        public iPCClient.iPCService.IPCEntityData CreateBlanketEntity(string Token, int EntityID) {
            return base.Channel.CreateBlanketEntity(Token, EntityID);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> CreateBlanketEntityAsync(string Token, int EntityID) {
            return base.Channel.CreateBlanketEntityAsync(Token, EntityID);
        }
        
        public iPCClient.iPCService.IPCEntityData CreateBlanketEntities(string Token, int EntityID, int DataHeight) {
            return base.Channel.CreateBlanketEntities(Token, EntityID, DataHeight);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> CreateBlanketEntitiesAsync(string Token, int EntityID, int DataHeight) {
            return base.Channel.CreateBlanketEntitiesAsync(Token, EntityID, DataHeight);
        }
        
        public string[] GetAvailableAlterOperations(string Token, int EntityID) {
            return base.Channel.GetAvailableAlterOperations(Token, EntityID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAvailableAlterOperationsAsync(string Token, int EntityID) {
            return base.Channel.GetAvailableAlterOperationsAsync(Token, EntityID);
        }
        
        public iPCClient.iPCService.IPCEntityData AlterEntityData(string Token, int EntityID, string Operation, iPCClient.iPCService.IPCEntityData data) {
            return base.Channel.AlterEntityData(Token, EntityID, Operation, data);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> AlterEntityDataAsync(string Token, int EntityID, string Operation, iPCClient.iPCService.IPCEntityData data) {
            return base.Channel.AlterEntityDataAsync(Token, EntityID, Operation, data);
        }
        
        public iPCClient.iPCService.IPCEntityData AlterEntitiesData(string Token, int EntityID, string[] Operations, iPCClient.iPCService.IPCEntityData data, iPCClient.iPCService.IPCSyncRequest SyncReq) {
            return base.Channel.AlterEntitiesData(Token, EntityID, Operations, data, SyncReq);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> AlterEntitiesDataAsync(string Token, int EntityID, string[] Operations, iPCClient.iPCService.IPCEntityData data, iPCClient.iPCService.IPCSyncRequest SyncReq) {
            return base.Channel.AlterEntitiesDataAsync(Token, EntityID, Operations, data, SyncReq);
        }
        
        public void StartAsyncReport(string Token, string ReportQueryID, int PageSize) {
            base.Channel.StartAsyncReport(Token, ReportQueryID, PageSize);
        }
        
        public System.Threading.Tasks.Task StartAsyncReportAsync(string Token, string ReportQueryID, int PageSize) {
            return base.Channel.StartAsyncReportAsync(Token, ReportQueryID, PageSize);
        }
        
        public iPCClient.iPCService.IPCAsyncReportRunStatusType CheckAsyncReportRunStatus(string Token, string ReportQueryID) {
            return base.Channel.CheckAsyncReportRunStatus(Token, ReportQueryID);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCAsyncReportRunStatusType> CheckAsyncReportRunStatusAsync(string Token, string ReportQueryID) {
            return base.Channel.CheckAsyncReportRunStatusAsync(Token, ReportQueryID);
        }
        
        public iPCClient.iPCService.IPCEntityData GetAsyncReportData(string Token, string ReportQueryID, int PageNumber) {
            return base.Channel.GetAsyncReportData(Token, ReportQueryID, PageNumber);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> GetAsyncReportDataAsync(string Token, string ReportQueryID, int PageNumber) {
            return base.Channel.GetAsyncReportDataAsync(Token, ReportQueryID, PageNumber);
        }
        
        public void StopAsyncReport(string Token, string ReportQueryID) {
            base.Channel.StopAsyncReport(Token, ReportQueryID);
        }
        
        public System.Threading.Tasks.Task StopAsyncReportAsync(string Token, string ReportQueryID) {
            return base.Channel.StopAsyncReportAsync(Token, ReportQueryID);
        }
        
        public int SubmitGetEntityDataRequest(string Token, int EntityID, string[] SelectableElementsList, iPCClient.iPCService.IPCRecordsSorter[] SortableElementsList, iPCClient.iPCService.IPCRecordsFilter[] FilterableElementsList, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass, int PageSize) {
            return base.Channel.SubmitGetEntityDataRequest(Token, EntityID, SelectableElementsList, SortableElementsList, FilterableElementsList, ElementNameClass, PageSize);
        }
        
        public System.Threading.Tasks.Task<int> SubmitGetEntityDataRequestAsync(string Token, int EntityID, string[] SelectableElementsList, iPCClient.iPCService.IPCRecordsSorter[] SortableElementsList, iPCClient.iPCService.IPCRecordsFilter[] FilterableElementsList, iPCClient.iPCService.IPCDataElementNameClass ElementNameClass, int PageSize) {
            return base.Channel.SubmitGetEntityDataRequestAsync(Token, EntityID, SelectableElementsList, SortableElementsList, FilterableElementsList, ElementNameClass, PageSize);
        }
        
        public iPCClient.iPCService.IPCSubmitGetEntityDataStatusType CheckGetEntityDataRunStatus(string Token, int SubmitRequestID) {
            return base.Channel.CheckGetEntityDataRunStatus(Token, SubmitRequestID);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCSubmitGetEntityDataStatusType> CheckGetEntityDataRunStatusAsync(string Token, int SubmitRequestID) {
            return base.Channel.CheckGetEntityDataRunStatusAsync(Token, SubmitRequestID);
        }
        
        public iPCClient.iPCService.IPCEntityData GetDeferedEntityData(string Token, int SubmitRequestID, int PageNumber) {
            return base.Channel.GetDeferedEntityData(Token, SubmitRequestID, PageNumber);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCEntityData> GetDeferedEntityDataAsync(string Token, int SubmitRequestID, int PageNumber) {
            return base.Channel.GetDeferedEntityDataAsync(Token, SubmitRequestID, PageNumber);
        }
        
        public void CloseDeferedEntityData(string Token, int SubmitRequestID) {
            base.Channel.CloseDeferedEntityData(Token, SubmitRequestID);
        }
        
        public System.Threading.Tasks.Task CloseDeferedEntityDataAsync(string Token, int SubmitRequestID) {
            return base.Channel.CloseDeferedEntityDataAsync(Token, SubmitRequestID);
        }
        
        public void SetSyncProgress(string Token, iPCClient.iPCService.IPCSyncRequest SyncReq) {
            base.Channel.SetSyncProgress(Token, SyncReq);
        }
        
        public System.Threading.Tasks.Task SetSyncProgressAsync(string Token, iPCClient.iPCService.IPCSyncRequest SyncReq) {
            return base.Channel.SetSyncProgressAsync(Token, SyncReq);
        }
        
        public iPCClient.iPCService.IPCSyncRequest[] GetSyncProgress(string Token, iPCClient.iPCService.IPCSyncRequest SyncReq) {
            return base.Channel.GetSyncProgress(Token, SyncReq);
        }
        
        public System.Threading.Tasks.Task<iPCClient.iPCService.IPCSyncRequest[]> GetSyncProgressAsync(string Token, iPCClient.iPCService.IPCSyncRequest SyncReq) {
            return base.Channel.GetSyncProgressAsync(Token, SyncReq);
        }
    }
}
